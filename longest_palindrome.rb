#! /usr/local/opt/ruby/bin/ruby 

def is_palindrome(s)
    mid = s.length / 2
    for pos in 0...mid do
        complement = s.length - 1 - pos
        if (s[pos] != s[complement]) 
            return false
        end
    end
    return true
end


def longest_palindrome(s)
  largest = ''
  for pos in 0...s.length do
     for pos2 in pos...s.length do
        cur_length = pos2 - pos + 1
        if s[pos] == s[pos2] && cur_length > largest.length
          if is_palindrome(s[pos..pos2]) 
            if largest.length < pos2 - pos + 1
              largest = s[pos..pos2]
            end
          end
        end
     end
   end
 
  return largest
end

before = Time.now.to_i
puts longest_palindrome
after = Time.now.to_i

totaltime = after - before
puts totaltime
